go.property("player_direction", vmath.vector3())

local gate_time = 0.3

local function pick_a_direction(self) 

	local r = math.random(1,8)

	if r==1 then 
		self.dir.y = -1 
		self.dir.x = -1
	end 
	if r==2 then 
		self.dir.y = 0
		self.dir.x = -1
	end
	if r==3 then 
		self.dir.y = 1
		self.dir.x = -1 
	end
	if r==4 then 
		self.dir.y = -1
		self.dir.x = 0 
	end
	if r==5 then 
		self.dir.y = 1
		self.dir.x = 0 
	end
	if r==6 then 
		self.dir.y = -1
		self.dir.x = 1
	end
	if r==7 then 
		self.dir.y = 0
		self.dir.x = 1
	end
	if r==8 then 
		self.dir.y = 1
		self.dir.x = 1
	end
	

end

function init(self)
	
	self.dir = self.player_direction
	self.parkour = false
	pick_a_direction(self)
	timer.delay(math.random()*math.random(1,3), true, 
	function() 
		pick_a_direction(self)
	end)
end

function final(self)
	
end

function update(self, dt)

	

	
	
	msg.post("#sprite", "play_animation", {id = hash("running")})
	
	if self.dir.x > 0 and self.dir.y == 0 then 
		go.set_rotation(vmath.quat_rotation_z(math.rad(270)))
		--go.animate(go.get_id(), "rotation", go.PLAYBACK_ONCE_FORWARD, vmath.quat_rotation_z(math.rad(270)), go.EASING_LINEAR, .2)
	elseif self.dir.x < 0 and self.dir.y == 0 then 
		go.set_rotation(vmath.quat_rotation_z(math.rad(90)))
	elseif self.dir.y > 0 and self.dir.x == 0 then 
		go.set_rotation(vmath.quat_rotation_z(math.rad(0)))
	elseif self.dir.y < 1 and self.dir.x == 0 then 
		go.set_rotation(vmath.quat_rotation_z(math.rad(180)))
		-- UpLeft, UpRight, DownRight, DownLeft
		-- UpLeft
	elseif self.dir.x > 0 and self.dir.y > 0 then 
		go.set_rotation(vmath.quat_rotation_z(math.rad(315)))
		-- DownLeft
	elseif self.dir.x > 0 and self.dir.y < 0 then
		go.set_rotation(vmath.quat_rotation_z(math.rad(225)))
		-- DownRight
	elseif self.dir.x < 0 and self.dir.y < 0 then
		go.set_rotation(vmath.quat_rotation_z(math.rad(135)))
		-- UpRight
	elseif self.dir.x < 0 and self.dir.y > 0 then 
		go.set_rotation(vmath.quat_rotation_z(math.rad(55)))
	end	

	-- Determine movement direction 
	if vmath.length_sqr(self.dir) > 1 then 
		self.dir = vmath.normalize(self.dir)
	end
	
	local p = go.get_position()
	go.set_position(p + self.dir * 400 * dt)

end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
